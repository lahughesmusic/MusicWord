{"ast":null,"code":"import Svg, { Line, Circle } from \"react-native-svg\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { TrebleEasy, TrebleMedium, TrebleHard, BassEasy, BassMedium, BassHard } from \"./CYnums\";\nimport SelectDropdown from \"react-native-select-dropdown\";\nimport TrebleClef from \"../images/TrebleClef.svg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar words = require(\"../assets/word.json\");\n\nvar outsideLetters = [];\nvar musicalLetters = [];\nvar cy = [];\n\nfunction getNote() {\n  musicalLetters = [];\n  outsideLetters = [];\n  var letters = words.words[Math.floor(Math.random() * 74)];\n  letters = letters.split(\"\");\n  var musicalAlphabet = words.musicLetters;\n\n  for (var i = 0; i < letters.length; i++) {\n    if (musicalAlphabet.includes(letters[i])) {\n      musicalLetters.push(letters[i]);\n      outsideLetters.push(i);\n    } else {\n      outsideLetters.push(letters[i]);\n      musicalLetters.push(i);\n    }\n  }\n\n  console.log(outsideLetters);\n  console.log(musicalLetters);\n  return outsideLetters, musicalLetters;\n}\n\nfunction isNumber(val) {\n  return /^[-]?\\d+$/.test(val);\n}\n\nfunction getCYTrebleHard() {\n  cy = [];\n\n  for (var i = 0; i < musicalLetters.length; i++) {\n    if (!isNumber(musicalLetters[i])) {\n      cy.push(TrebleHard[musicalLetters[i]]);\n    } else {\n      cy.push(false);\n    }\n  }\n\n  console.log(cy);\n}\n\nvar noteOptions = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n\nvar NoteInputs = function NoteInputs() {\n  var listNotes = function listNotes() {\n    return musicalLetters.map(function (element, i) {\n      if (isNumber(musicalLetters[i])) {\n        console.log(\"isNumber\");\n      } else {\n        return _jsx(View, {\n          style: styles.textInput,\n          children: _jsx(SelectDropdown, {\n            data: noteOptions,\n            onSelect: function onSelect(selectedItem, index) {\n              console.log(selectedItem, index);\n            }\n          })\n        });\n      }\n    });\n  };\n\n  return _jsx(View, {\n    children: listNotes()\n  });\n};\n\nvar DrawStaff = function DrawStaff() {\n  getNote();\n  getCYTrebleHard();\n\n  var list = function list() {\n    return cy.map(function (element, i) {\n      if (!cy[i]) {\n        console.log(false);\n        return _jsxs(View, {\n          children: [_jsx(TrebleClef, {}), _jsxs(Svg, {\n            style: styles.staves,\n            children: [_jsx(Line, {\n              x1: \"0\",\n              y1: \"16\",\n              x2: \"400\",\n              y2: \"16\",\n              stroke: \"black\",\n              strokeWidth: \"1\"\n            }), _jsx(Line, {\n              x1: \"0\",\n              y1: \"32\",\n              x2: \"400\",\n              y2: \"32\",\n              stroke: \"black\",\n              strokeWidth: \"1\"\n            }), _jsx(Line, {\n              x1: \"0\",\n              y1: \"48\",\n              x2: \"400\",\n              y2: \"48\",\n              stroke: \"black\",\n              strokeWidth: \"1\"\n            }), _jsx(Line, {\n              x1: \"0\",\n              y1: \"64\",\n              x2: \"400\",\n              y2: \"64\",\n              stroke: \"black\",\n              strokeWidth: \"1\"\n            }), _jsx(Line, {\n              x1: \"0\",\n              y1: \"80\",\n              x2: \"400\",\n              y2: \"80\",\n              stroke: \"black\",\n              strokeWidth: \"1\"\n            })]\n          }, i), _jsx(Text, {\n            style: styles.text,\n            children: outsideLetters[i]\n          })]\n        }, i);\n      } else {\n        return _jsxs(Svg, {\n          style: styles.staves,\n          children: [_jsx(Circle, {\n            cx: \"100\",\n            cy: cy[i],\n            r: \"5\",\n            stroke: \"black\",\n            strokeWidth: \"2.5\",\n            fill: \"black\"\n          }), _jsx(Line, {\n            x1: \"0\",\n            y1: \"16\",\n            x2: \"400\",\n            y2: \"16\",\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }), _jsx(Line, {\n            x1: \"0\",\n            y1: \"32\",\n            x2: \"400\",\n            y2: \"32\",\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }), _jsx(Line, {\n            x1: \"0\",\n            y1: \"48\",\n            x2: \"400\",\n            y2: \"48\",\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }), _jsx(Line, {\n            x1: \"0\",\n            y1: \"64\",\n            x2: \"400\",\n            y2: \"64\",\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }), _jsx(Line, {\n            x1: \"0\",\n            y1: \"80\",\n            x2: \"400\",\n            y2: \"80\",\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          })]\n        }, i);\n      }\n    });\n  };\n\n  return _jsx(View, {\n    style: styles.staves,\n    children: list()\n  });\n};\n\nvar styles = StyleSheet.create({\n  staves: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginTop: 50,\n    height: 100,\n    padding: 10\n  },\n  text: {\n    fontSize: 40,\n    marginTop: 50,\n    flex: 1\n  },\n  textInput: {\n    height: 10\n  }\n});\nexport { DrawStaff, NoteInputs };","map":{"version":3,"sources":["/Users/musicaldev/Desktop/projects/MusicWord/components/DrawStaff.js"],"names":["Svg","Line","Circle","TrebleEasy","TrebleMedium","TrebleHard","BassEasy","BassMedium","BassHard","SelectDropdown","TrebleClef","words","require","outsideLetters","musicalLetters","cy","getNote","letters","Math","floor","random","split","musicalAlphabet","musicLetters","i","length","includes","push","console","log","isNumber","val","test","getCYTrebleHard","noteOptions","NoteInputs","listNotes","map","element","styles","textInput","selectedItem","index","DrawStaff","list","staves","text","StyleSheet","create","flex","flexDirection","marginTop","height","padding","fontSize"],"mappings":"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","sourcesContent":["import Svg, { Line, Circle } from \"react-native-svg\";\nimport { StyleSheet, View, Text, TextInput } from \"react-native\";\nimport {\n  TrebleEasy,\n  TrebleMedium,\n  TrebleHard,\n  BassEasy,\n  BassMedium,\n  BassHard\n} from \"./CYnums\";\nimport SelectDropdown from \"react-native-select-dropdown\";\nimport TrebleClef from \"../images/TrebleClef.svg\";\n\n// import { TrebleClef } from \"../images/TrebleClef.svg\";\n// import { Playground } from \"./Playground\";\n\nconst words = require(\"../assets/word.json\");\nlet outsideLetters = [];\nlet musicalLetters = [];\nlet cy = [];\n\nfunction getNote() {\n  //pick random word from word.json\n  musicalLetters = [];\n  outsideLetters = [];\n\n  let letters = words.words[Math.floor(Math.random() * 74)];\n  letters = letters.split(\"\");\n  const musicalAlphabet = words.musicLetters;\n\n  //check if letter is part of musical alphabet\n  for (let i = 0; i < letters.length; i++) {\n    if (musicalAlphabet.includes(letters[i])) {\n      musicalLetters.push(letters[i]);\n      outsideLetters.push(i);\n    } else {\n      outsideLetters.push(letters[i]);\n      musicalLetters.push(i);\n    }\n  }\n  console.log(outsideLetters);\n  console.log(musicalLetters);\n  return outsideLetters, musicalLetters;\n}\n\nfunction isNumber(val) {\n  // negative or positive\n  return /^[-]?\\d+$/.test(val);\n}\n\nfunction getCYTrebleHard() {\n  cy = [];\n  //use musicalLetters to find object key\n  for (let i = 0; i < musicalLetters.length; i++) {\n    if (!isNumber(musicalLetters[i])) {\n      cy.push(TrebleHard[musicalLetters[i]]);\n    } else {\n      cy.push(false);\n    }\n  }\n  console.log(cy);\n}\nconst noteOptions = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n\nconst NoteInputs = () => {\n  const listNotes = () => {\n    return musicalLetters.map((element, i) => {\n      if (isNumber(musicalLetters[i])) {\n        console.log(\"isNumber\");\n      } else {\n        return (\n          <View style={styles.textInput}>\n            <SelectDropdown\n              data={noteOptions}\n              onSelect={(selectedItem, index) => {\n                console.log(selectedItem, index);\n              }}\n            />\n          </View>\n        );\n      }\n    });\n  };\n  return <View>{listNotes()}</View>;\n};\n\nconst DrawStaff = () => {\n  getNote();\n  getCYTrebleHard();\n\n  const list = () => {\n    return cy.map((element, i) => {\n      if (!cy[i]) {\n        console.log(false);\n        return (\n          <View key={i}>\n            <TrebleClef />\n            <Svg key={i} style={styles.staves}>\n              <Line\n                x1=\"0\"\n                y1=\"16\"\n                x2=\"400\"\n                y2=\"16\"\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n              <Line\n                x1=\"0\"\n                y1=\"32\"\n                x2=\"400\"\n                y2=\"32\"\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n              <Line\n                x1=\"0\"\n                y1=\"48\"\n                x2=\"400\"\n                y2=\"48\"\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n              <Line\n                x1=\"0\"\n                y1=\"64\"\n                x2=\"400\"\n                y2=\"64\"\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n              <Line\n                x1=\"0\"\n                y1=\"80\"\n                x2=\"400\"\n                y2=\"80\"\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n            </Svg>\n            <Text style={styles.text}>{outsideLetters[i]}</Text>\n          </View>\n        );\n      } else {\n        return (\n          <Svg key={i} style={styles.staves}>\n            <Circle\n              cx=\"100\"\n              cy={cy[i]}\n              r=\"5\"\n              stroke=\"black\"\n              strokeWidth=\"2.5\"\n              fill=\"black\"\n            />\n            <Line\n              x1=\"0\"\n              y1=\"16\"\n              x2=\"400\"\n              y2=\"16\"\n              stroke=\"black\"\n              strokeWidth=\"1\"\n            />\n            <Line\n              x1=\"0\"\n              y1=\"32\"\n              x2=\"400\"\n              y2=\"32\"\n              stroke=\"black\"\n              strokeWidth=\"1\"\n            />\n            <Line\n              x1=\"0\"\n              y1=\"48\"\n              x2=\"400\"\n              y2=\"48\"\n              stroke=\"black\"\n              strokeWidth=\"1\"\n            />\n            <Line\n              x1=\"0\"\n              y1=\"64\"\n              x2=\"400\"\n              y2=\"64\"\n              stroke=\"black\"\n              strokeWidth=\"1\"\n            />\n            <Line\n              x1=\"0\"\n              y1=\"80\"\n              x2=\"400\"\n              y2=\"80\"\n              stroke=\"black\"\n              strokeWidth=\"1\"\n            />\n          </Svg>\n        );\n      }\n    });\n  };\n\n  return <View style={styles.staves}>{list()}</View>;\n};\n\nconst styles = StyleSheet.create({\n  staves: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginTop: 50,\n    height: 100,\n    padding: 10\n  },\n  text: {\n    fontSize: 40,\n    marginTop: 50,\n    flex: 1\n  },\n  textInput: {\n    height: 10\n  }\n});\n\nexport { DrawStaff, NoteInputs };\n"]},"metadata":{},"sourceType":"module"}