{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Svg, { Line, Circle } from \"react-native-svg\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport { TrebleEasy, TrebleMedium, TrebleHard, BassEasy, BassMedium, BassHard } from \"./CYnums\";\nimport { Lines } from \"./Lines\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar words = require(\"../assets/word.json\");\n\nvar outsideLetters = [];\nvar musicalLetters = [];\nvar cy = [];\n\nfunction getNote() {\n  musicalLetters = [];\n  outsideLetters = [];\n  var letters = words.words[Math.floor(Math.random() * 74)];\n  letters = letters.split(\"\");\n  var musicalAlphabet = words.musicLetters;\n\n  for (var i = 0; i < letters.length; i++) {\n    if (musicalAlphabet.includes(letters[i])) {\n      musicalLetters.push(letters[i]);\n      outsideLetters.push(i);\n    } else {\n      outsideLetters.push(letters[i]);\n      musicalLetters.push(i);\n    }\n  }\n\n  console.log(outsideLetters);\n  console.log(musicalLetters);\n  return outsideLetters, musicalLetters;\n}\n\nfunction isNumber(val) {\n  return /^[-]?\\d+$/.test(val);\n}\n\nfunction getCYTrebleHard() {\n  cy = [];\n\n  for (var i = 0; i < musicalLetters.length; i++) {\n    if (!isNumber(musicalLetters[i])) {\n      cy.push(TrebleHard[musicalLetters[i]]);\n    } else {\n      cy.push(false);\n    }\n  }\n\n  console.log(cy);\n}\n\nvar DrawStaff = function DrawStaff() {\n  getNote();\n  getCYTrebleHard();\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var data = [{\n    label: \"A\",\n    value: \"A\"\n  }, {\n    label: \"B\",\n    value: \"B\"\n  }, {\n    label: \"C\",\n    value: \"C\"\n  }, {\n    label: \"D\",\n    value: \"D\"\n  }, {\n    label: \"E\",\n    value: \"E\"\n  }, {\n    label: \"F\",\n    value: \"F\"\n  }, {\n    label: \"G\",\n    value: \"G\"\n  }];\n\n  var list = function list() {\n    return cy.map(function (element, i) {\n      if (!cy[i]) {\n        console.log(false);\n        return _jsxs(View, {\n          children: [_jsx(Svg, {\n            style: styles.staves\n          }), _jsx(Text, {\n            style: styles.text,\n            children: outsideLetters[i]\n          }, i)]\n        }, i);\n      } else {\n        return _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(View, {\n            children: _jsxs(Svg, {\n              style: styles,\n              children: [_jsx(Circle, {\n                cx: \"50\",\n                cy: cy[i],\n                r: \"5\",\n                stroke: \"black\",\n                strokeWidth: \"2.5\",\n                fill: \"black\"\n              }), _jsx(Line, {\n                x1: \"0\",\n                y1: \"16\",\n                x2: \"400\",\n                y2: \"16\",\n                stroke: \"black\",\n                strokeWidth: \"1\"\n              }), _jsx(Line, {\n                x1: \"0\",\n                y1: \"32\",\n                x2: \"400\",\n                y2: \"32\",\n                stroke: \"black\",\n                strokeWidth: \"1\"\n              }), _jsx(Line, {\n                x1: \"0\",\n                y1: \"48\",\n                x2: \"400\",\n                y2: \"48\",\n                stroke: \"black\",\n                strokeWidth: \"1\"\n              }), _jsx(Line, {\n                x1: \"0\",\n                y1: \"64\",\n                x2: \"400\",\n                y2: \"64\",\n                stroke: \"black\",\n                strokeWidth: \"1\"\n              }), _jsx(Line, {\n                x1: \"0\",\n                y1: \"80\",\n                x2: \"400\",\n                y2: \"80\",\n                stroke: \"black\",\n                strokeWidth: \"1\"\n              })]\n            }, i)\n          }), _jsx(View, {\n            children: _jsx(TextInput, {\n              name: musicalLetters[i],\n              style: styles.textInput\n            })\n          })]\n        });\n      }\n    });\n  };\n\n  return _jsx(View, {\n    style: styles.staves,\n    children: list()\n  });\n};\n\nvar styles = StyleSheet.create({\n  staves: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginTop: 50,\n    height: 100,\n    padding: 10\n  },\n  text: {\n    fontSize: 40,\n    marginBottom: 130\n  },\n  textInput: {\n    marginBottom: 200,\n    height: 10,\n    padding: 10,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"space-around\",\n    flexDirection: \"column\"\n  }\n});\nexport { DrawStaff };","map":{"version":3,"sources":["/Users/musicaldev/Desktop/projects/MusicWord/components/DrawStaff.js"],"names":["Svg","Line","Circle","TrebleEasy","TrebleMedium","TrebleHard","BassEasy","BassMedium","BassHard","Lines","useState","words","require","outsideLetters","musicalLetters","cy","getNote","letters","Math","floor","random","split","musicalAlphabet","musicLetters","i","length","includes","push","console","log","isNumber","val","test","getCYTrebleHard","DrawStaff","value","setValue","data","label","list","map","element","styles","staves","text","container","textInput","StyleSheet","create","flex","flexDirection","marginTop","height","padding","fontSize","marginBottom","borderBottomColor","borderBottomWidth","justifyContent"],"mappings":"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","sourcesContent":["import Svg, { Line, Circle } from \"react-native-svg\";\nimport { StyleSheet, View, Text, TextInput, Picker } from \"react-native\";\nimport {\n  TrebleEasy,\n  TrebleMedium,\n  TrebleHard,\n  BassEasy,\n  BassMedium,\n  BassHard\n} from \"./CYnums\";\n\nimport { Lines } from \"./Lines\";\nimport { useState } from \"react\";\n\nconst words = require(\"../assets/word.json\");\nlet outsideLetters = [];\nlet musicalLetters = [];\nlet cy = [];\n\nfunction getNote() {\n  //pick random word from word.json\n  musicalLetters = [];\n  outsideLetters = [];\n\n  let letters = words.words[Math.floor(Math.random() * 74)];\n  letters = letters.split(\"\");\n  const musicalAlphabet = words.musicLetters;\n\n  //check if letter is part of musical alphabet\n  for (let i = 0; i < letters.length; i++) {\n    if (musicalAlphabet.includes(letters[i])) {\n      musicalLetters.push(letters[i]);\n      outsideLetters.push(i);\n    } else {\n      outsideLetters.push(letters[i]);\n      musicalLetters.push(i);\n    }\n  }\n  console.log(outsideLetters);\n  console.log(musicalLetters);\n  return outsideLetters, musicalLetters;\n}\n\nfunction isNumber(val) {\n  // negative or positive\n  return /^[-]?\\d+$/.test(val);\n}\n\nfunction getCYTrebleHard() {\n  cy = [];\n  //use musicalLetters to find object key\n  for (let i = 0; i < musicalLetters.length; i++) {\n    if (!isNumber(musicalLetters[i])) {\n      cy.push(TrebleHard[musicalLetters[i]]);\n    } else {\n      cy.push(false);\n    }\n  }\n  console.log(cy);\n}\n\nconst DrawStaff = () => {\n  getNote();\n  getCYTrebleHard();\n  const [value, setValue] = useState({});\n  // guessNote();\n\n  const data = [\n    { label: \"A\", value: \"A\" },\n    { label: \"B\", value: \"B\" },\n    { label: \"C\", value: \"C\" },\n    { label: \"D\", value: \"D\" },\n    { label: \"E\", value: \"E\" },\n    { label: \"F\", value: \"F\" },\n    { label: \"G\", value: \"G\" }\n  ];\n\n  const list = () => {\n    return cy.map((element, i) => {\n      if (!cy[i]) {\n        console.log(false);\n        return (\n          <View key={i}>\n            <Svg style={styles.staves}>{/* <Lines></Lines> */}</Svg>\n            <Text key={i} style={styles.text}>\n              {outsideLetters[i]}\n            </Text>\n          </View>\n        );\n      } else {\n        return (\n          <View style={styles.container}>\n            <View>\n              <Svg key={i} style={styles}>\n                <Circle\n                  cx=\"50\"\n                  cy={cy[i]}\n                  r=\"5\"\n                  stroke=\"black\"\n                  strokeWidth=\"2.5\"\n                  fill=\"black\"\n                />\n                <Line\n                  x1=\"0\"\n                  y1=\"16\"\n                  x2=\"400\"\n                  y2=\"16\"\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n                <Line\n                  x1=\"0\"\n                  y1=\"32\"\n                  x2=\"400\"\n                  y2=\"32\"\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n                <Line\n                  x1=\"0\"\n                  y1=\"48\"\n                  x2=\"400\"\n                  y2=\"48\"\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n                <Line\n                  x1=\"0\"\n                  y1=\"64\"\n                  x2=\"400\"\n                  y2=\"64\"\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n                <Line\n                  x1=\"0\"\n                  y1=\"80\"\n                  x2=\"400\"\n                  y2=\"80\"\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n              </Svg>\n            </View>\n            <View>\n              <TextInput name={musicalLetters[i]} style={styles.textInput} />\n            </View>\n          </View>\n        );\n      }\n    });\n  };\n\n  return <View style={styles.staves}>{list()}</View>;\n};\n\nconst styles = StyleSheet.create({\n  staves: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginTop: 50,\n    height: 100,\n    padding: 10\n  },\n  text: {\n    fontSize: 40,\n    marginBottom: 130\n  },\n  textInput: {\n    marginBottom: 200,\n    height: 10,\n    padding: 10,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"space-around\",\n    flexDirection: \"column\"\n  }\n});\n\nexport { DrawStaff };\n"]},"metadata":{},"sourceType":"module"}